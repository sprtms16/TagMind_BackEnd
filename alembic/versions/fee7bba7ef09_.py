"""Refactor models for Tag Packs and IAP

Revision ID: fee7bba7ef09
Revises:
Create Date: 2025-07-21 09:22:25.584409

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "fee7bba7ef09"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tag_packs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("product_id"),
    )
    op.create_index(op.f("ix_tag_packs_id"), "tag_packs", ["id"], unique=False)
    op.create_table(
        "user_tag_packs",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("tag_pack_id", sa.Integer(), nullable=False),
        sa.Column(
            "purchased_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["tag_pack_id"],
            ["tag_packs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "tag_pack_id"),
    )
    op.drop_index(op.f("ix_analysis_results_id"), table_name="analysis_results")
    op.drop_table("analysis_results")
    op.alter_column("diaries", "content", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("diaries", "user_id", existing_type=sa.INTEGER(), nullable=False)
    op.create_index(op.f("ix_diaries_title"), "diaries", ["title"], unique=False)
    op.drop_constraint(op.f("diaries_user_id_fkey"), "diaries", type_="foreignkey")
    op.create_foreign_key(None, "diaries", "users", ["user_id"], ["id"])
    op.drop_constraint(
        op.f("diary_tags_diary_id_fkey"), "diary_tags", type_="foreignkey"
    )
    op.drop_constraint(op.f("diary_tags_tag_id_fkey"), "diary_tags", type_="foreignkey")
    op.create_foreign_key(None, "diary_tags", "tags", ["tag_id"], ["id"])
    op.create_foreign_key(None, "diary_tags", "diaries", ["diary_id"], ["id"])
    op.drop_column("diary_tags", "source")

    # Add category column first, allowing null temporarily
    op.add_column("tags", sa.Column("category", sa.String(), nullable=True))
    # Update existing rows with a default category
    op.execute("UPDATE tags SET category = '기타' WHERE category IS NULL")
    # Then alter the column to be NOT NULL
    op.alter_column("tags", "category", existing_type=sa.String(), nullable=False)

    # Add is_default column first, allowing null temporarily
    op.add_column("tags", sa.Column("is_default", sa.Boolean(), nullable=True))
    # Update existing rows with a default for is_default
    op.execute("UPDATE tags SET is_default = FALSE WHERE is_default IS NULL")
    # Then alter the column to be NOT NULL
    op.alter_column("tags", "is_default", existing_type=sa.Boolean(), nullable=False)

    op.add_column("tags", sa.Column("tag_pack_id", sa.Integer(), nullable=True))
    op.drop_constraint(op.f("tags_name_key"), "tags", type_="unique")
    op.create_index(op.f("ix_tags_name"), "tags", ["name"], unique=True)
    op.create_foreign_key(None, "tags", "tag_packs", ["tag_pack_id"], ["id"])
    op.add_column(
        "users", sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True)
    )
    op.create_index(op.f("ix_users_nickname"), "users", ["nickname"], unique=True)
    op.drop_column("users", "provider")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users", sa.Column("provider", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.drop_index(op.f("ix_users_nickname"), table_name="users")
    op.drop_column("users", "updated_at")
    op.drop_constraint(None, "tags", type_="foreignkey")
    op.drop_index(op.f("ix_tags_name"), table_name="tags")
    op.create_unique_constraint(op.f("tags_name_key"), "tags", ["name"])
    op.drop_column("tags", "tag_pack_id")
    op.drop_column("tags", "is_default")
    op.drop_column("tags", "category")
    op.add_column(
        "diary_tags",
        sa.Column("source", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "diary_tags", type_="foreignkey")
    op.drop_constraint(None, "diary_tags", type_="foreignkey")
    op.create_foreign_key(
        op.f("diary_tags_tag_id_fkey"),
        "diary_tags",
        "tags",
        ["tag_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("diary_tags_diary_id_fkey"),
        "diary_tags",
        "diaries",
        ["diary_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(None, "diaries", type_="foreignkey")
    op.create_foreign_key(
        op.f("diaries_user_id_fkey"),
        "diaries",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_diaries_title"), table_name="diaries")
    op.alter_column("diaries", "user_id", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("diaries", "content", existing_type=sa.TEXT(), nullable=False)
    op.create_table(
        "analysis_results",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("diary_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "sentiment",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "entities",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "analyzed_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["diary_id"],
            ["diaries.id"],
            name=op.f("analysis_results_diary_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("analysis_results_pkey")),
        sa.UniqueConstraint("diary_id", name=op.f("analysis_results_diary_id_key")),
    )
    op.create_index(
        op.f("ix_analysis_results_id"), "analysis_results", ["id"], unique=False
    )
    op.drop_table("user_tag_packs")
    op.drop_index(op.f("ix_tag_packs_id"), table_name="tag_packs")
    op.drop_table("tag_packs")
    # ### end Alembic commands ###
